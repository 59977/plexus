use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};

use graph::geometry::Geometry;
use graph::mesh::{self, Mesh};
use graph::storage::FaceKey;

// TODO: Generalize this pairing of a ref to a mesh and a key for topology
//       within the mesh.

pub struct Face<M, G>
where
    M: AsRef<Mesh<G>>,
    G: Geometry,
{
    mesh: M,
    key: FaceKey,
    phantom: PhantomData<G>,
}

impl<M, G> Face<M, G>
where
    M: AsRef<Mesh<G>>,
    G: Geometry,
{
    // This borrows a mesh and should always be generated by that same mesh.
    // This means that if dereferencing fails, something has gone horribly
    // wrong and panicing is probably the correct behavior.
    pub(super) fn new(mesh: M, face: FaceKey) -> Self {
        Face {
            mesh: mesh,
            key: face,
            phantom: PhantomData,
        }
    }
}

impl<M, G> Face<M, G>
where
    M: AsRef<Mesh<G>> + AsMut<Mesh<G>>,
    G: Geometry,
{
}

impl<'a, M, G> Deref for Face<&'a M, G>
where
    M: AsRef<Mesh<G>>,
    G: Geometry,
{
    type Target = mesh::Face<G::Face>;

    fn deref(&self) -> &Self::Target {
        self.mesh.as_ref().faces.get(self.key).unwrap()
    }
}

impl<'a, M, G> Deref for Face<&'a mut M, G>
where
    M: AsRef<Mesh<G>> + AsMut<Mesh<G>>,
    G: Geometry,
{
    type Target = mesh::Face<G::Face>;

    fn deref(&self) -> &Self::Target {
        self.mesh.as_ref().faces.get(self.key).unwrap()
    }
}

impl<'a, M, G> DerefMut for Face<&'a mut M, G>
where
    M: AsRef<Mesh<G>> + AsMut<Mesh<G>>,
    G: Geometry,
{
    fn deref_mut(&mut self) -> &mut Self::Target {
        self.mesh.as_mut().faces.get_mut(self.key).unwrap()
    }
}
